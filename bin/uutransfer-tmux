#!/usr/bin/env ruby

require 'pp'
require 'tempfile'
require 'pathname'
require 'digest/md5'

def format_bytes(bytes)
	case
	when bytes < 1024
		"%d bytes" % bytes
	when bytes < (1024 * 1024)
		"%.2f KBytes" % (bytes / 1024.0)
	when bytes < (1024 * 1024 * 1024)
		"%.2f MBytes" % (bytes / 1024.0 / 1024.0)
	else
		"%.2f GBytes" % (bytes / 1024.0 / 1024.0 / 1024.0)
	end
end

target = ARGV.shift

unless target.start_with?('%')
	panes = Hash[`tmux list-windows -F '\#{window_index} \#{pane_id}'`.split(/\n/).map {|i| i.split(/ /) }]
	$stderr.puts "get active pane for window: #{target} => pane: #{panes[target]}"
	target = panes[target]
end

unless target
	$stderr.puts "Usage: #{$0} [window_index | pane_id]"
	exit 1
end

def pipe_pane(pane_id)
	file = Tempfile.new($0)
	system('tmux', 'pipe-pane', '-t', pane_id, '-O', "cat>#{file.path}")
	begin
		yield file
	ensure
		system('tmux', 'pipe-pane', '-t', pane_id)
	end
end

pipe_pane(target) do |f|
	puts "Watching pane #{target}"
	puts "How to uuencode:"
	puts DATA.read.gsub(/^/, "  ")

	time = nil, filename = nil, dest = nil, buff = nil, type = nil
	prev = Time.at(0)
	while true
		line = f.gets

		if f.eof?
			# midstream of line...
			if line
				buff = line
			else
				sleep 0.5
			end
			next
		else
			line = buff << line if buff
			buff = nil
		end

		line.gsub!(/\r\n/, "\n")
		line.chomp!

		now = Time.now

		case
		when m = /^(end|====)$/.match(line)
			dest.close

			md5 = Digest::MD5.hexdigest(filename.read)

			f.seek(0)
			f.truncate(0)

			system "tmux", "set-option", "display-time", "10000"
			system "tmux", "display-message", "#{filename.realpath} was created. md5: #{md5}"
			system "tmux", "set-option", "-u", "display-time"

			elapsed = now - time

			puts
			puts "#{filename}: Done #{filename.realpath} #{format_bytes filename.size} (#{elapsed.to_i} sec, #{format_bytes(filename.size / elapsed)}/sec) #{md5}"

			filename = nil
			dest	 = nil
		when dest
			elapsed = now - time

			dest << line.unpack(type)[0]

			if (now - prev) > 1
				print "#{filename}: Writing... #{format_bytes(dest.pos)} #{elapsed > 3 ? "(#{format_bytes(dest.pos / elapsed)}/sec)": ''}		  \r"
				$stdout.flush
				prev = now
			end
		when m = /begin(-base64)? (\d\d\d) ([^\s'"]+)$/.match(line)
			type	 = m[1] ? 'm' : 'u'
			time	 = now
			filename = Pathname(m[3]).basename
			dest	 = filename.open('w')
			puts "#{filename}: Detected uuencoded file..."
		end
	end
end

__END__
Use openssl:
	sh -c 'echo "begin-base64 666 $0"; openssl enc -base64 -in $0; echo "===="' file
Use uuencode:
	uuencode file
Use base64:
	sh -c 'echo "begin-base64 666 $0"; base64 $0; echo "===="'
Use ruby:
	ruby -e 'puts "begin 666 #{File.basename(ARGV[0])}\n#{[File.read(ARGV[0])].pack("u")}`\nend"' file
Use perl:
	perl -MPath::Class -e 'my $file=file(shift);printf("begin 666 %s\n%s`\nend\n",$file->basename,pack("u",scalar $file->slurp))' file

