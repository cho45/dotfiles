#!/usr/bin/env ruby

require 'pathname'
require 'digest/md5'

window = ARGV.shift || 1
if window == ENV['WINDOW']
	abort "same window"
end

def format_bytes(bytes)
	case
	when bytes < 1024
		"%d bytes"
	when bytes < (1024 * 1024)
		"%.2f KBytes" % (bytes / 1024.0)
	when bytes < (1024 * 1024 * 1024)
		"%.2f MBytes" % (bytes / 1024.0 / 1024.0)
	else
		"%.2f GBytes" % (bytes / 1024.0 / 1024.0 / 1024.0)
	end
end

# screen fails writing to directory created by tmpdir, so use /tmp instead
dir = Pathname('/tmp')

system "screen", "-X", "eval", "select #{window}", "logfile #{dir}/uutransfer.%n", "logfile flush 1", "log on"
file = dir + "uutransfer.#{window}"
file.unlink rescue nil
begin
	puts "Waiting for log..."
	sleep 1 until file.exist?

	puts "Watching window #{window}"
	File.open(file, 'r+') do |f|
		time = nil, filename = nil, dest = nil, buff = ''
		loop do
			line = f.gets
			unless line
				sleep 0.5
				next
			end

			if f.eof?
				# midstream of line...
				buff = line
				next
			else
				line = buff << line
				buff = ''
			end

			line.gsub!(/\r\n/, "\n")
			line.chomp!

			case
			when m = /begin (\d\d\d) ([^\s'"]+)$/.match(line)
				time     = Time.now
				filename = Pathname(m[2]).basename
				dest     = filename.open('w')
				puts "#{filename}: Detect uuencoded file..."
			when m = /^end$/.match(line)
				dest.close

				md5 = Digest::MD5.hexdigest(filename.read)

				f.seek(0)
				f.truncate(0)

				system "screen", "-X", "eval", "echo '#{filename.realpath} was created. md5: #{md5}'"

				elapsed = Time.now - time

				puts
				puts "#{filename}: Done #{filename.realpath} #{format_bytes filename.size} (#{format_bytes(filename.size / elapsed)}/sec) #{md5}"

				filename = nil
				dest     = nil
			when dest
				elapsed = Time.now - time

				dest << line.unpack('u')[0]
				print "#{filename}: Receving... #{format_bytes(dest.pos)} #{elapsed > 5 ? "#{format_bytes(dest.pos / elapsed)}/sec": ''}         \r"
				$stdout.flush
			end
		end
	end
rescue Interrupt
	puts "Exiting..."
ensure
	system "screen", "-X", "eval", "select #{window}", "log off", "select #{ENV['WINDOW']}"
end

__END__
uuencode file
ruby -e 'puts "begin 666 #{File.basename(ARGV[0])}\n#{[File.read(ARGV[0])].pack("u")}`\nend"' file
perl -MPath::Class -e 'my $file=file(shift);printf("begin 666 %s\n%s`\nend\n",$file->basename,pack("u",scalar $file->slurp))' file


