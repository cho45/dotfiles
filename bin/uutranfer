#!/usr/bin/env ruby

require 'pathname'
require 'digest/md5'

window = ARGV.shift || 1
if window == ENV['WINDOW']
	abort "same window"
end

# screen fails writing to directory created by tmpdir, so use /tmp instead
dir = Pathname('/tmp')

system "screen", "-X", "eval", "select #{window}", "logfile #{dir}/uutransfer.%n", "logfile flush 1", "log on"
file = dir + "uutransfer.#{window}"
file.unlink
begin
	puts "Waiting for log..."
	sleep 1 until file.exist?

	puts "Watching window #{window}"
	File.open(file, 'r+') do |f|
		buff = ''
		filename = nil
		loop do
			begin
				buff << f.sysread(4096).gsub(/\r\n/, "\n")
			rescue EOFError => e
				sleep 1
				next
			end

			case
			when m = /begin (\d\d\d) ([^\s]+)\n/.match(buff)
				filename = Pathname(m[2]).basename
				puts "#{filename}: Detect uuencoded file..."
				buff.slice!(0, m.end(0))
			when m = /\nend\n/.match(buff)
				buff.slice!(m.begin(0), buff.size)

				puts "#{filename}: Writing... #{buff.size} bytes"
				dest = Pathname(filename).basename
				dest.open('w') do |out|
					out << buff.unpack('u')[0]
				end

				md5 = Digest::MD5.hexdigest(dest.read)

				f.seek(0)
				f.truncate(0)

				system "screen", "-X", "eval", "echo '#{dest.realpath} was created. md5: #{md5}'"

				puts "#{filename}: Done #{dest.realpath} #{dest.size} bytes #{md5}"

				buff.replace('')
				filename = nil
			when filename
				puts "#{filename}: Receving... #{buff.size} bytes"
			else
				buff.slice!(0, buff.size - 255)
			end
		end
	end
ensure
	system "screen", "-X", "eval", "select #{window}", "log off"
end

__END__
uuencode file
ruby -e 'puts "begin 666 #{File.basename(ARGV[0])}\n#{[File.read(ARGV[0])].pack("u")}`\nend"' file
perl -MPath::Class -e 'my $file=file(shift);printf("begin 666 %s\n%s`\nend\n",$file->basename,pack("u",scalar $file->slurp))' file


