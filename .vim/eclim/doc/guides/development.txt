*guides-development*


Eclim Developers Guide
**********************

This guide is intended mostly for those who wish to contribute to
eclim by fixing bugs or adding new functionality, but the first
section is also useful for users who would like to use the latest
development version of eclim.

*development-build*


Checking out the code and building it.
======================================

1. Check out the code:

   >

      $ git clone git://github.com/ervandew/eclim.git

   <


   Once you have a local git repository you can utilize the extensive
   local git functionality allowing you to commit code locally, create
   local branches, etc.  For guidelines on managing patches and
   submitting them, please see the patch guide below.

1. Build eclim:

   >

      $ cd eclim
      $ ant -Declipse.home=/your/eclipse/home/dir

   <


   Note: If your eclipse home path contains a space, be sure to quote it:

        > ant "-Declipse.home=C:/Program Files/eclipse"

   This will build and deploy eclim to your eclipse and vim
   directories.  If you don't want to supply the eclipse home
   directory every time, you can set the environment variable
   ECLIM_ECLIPSE_HOME which the build script will then utilize.

   Note: If your vimfiles directory is not located at the default location
     for your OS, then you can specify the location using the
     "vim.files" property:

        >

           $ ant -Dvim.files=<your vimfiles dir>

        <


   By default the above ant call will build all the eclim plugins,
   requiring you to have all the related dependencies already
   installed in your eclipse distribution.  However, if you only want
   a subset of the eclim plugins to be built, you can specify so using
   the 'plugins' system property:

   >

      # build only ant and jdt (java) support
      $ ant -Dplugins=ant,jdt

      # build only cdt (c/c++) support
      $ ant -Dplugins=cdt

      # build only pdt (php) support (requires wst and dltk)
      $ ant -Dplugins=wst,dltk,pdt

      # build only ruby support (requires dltk)
      $ ant -Dplugins=dltk,dltkruby

   <


   Note: On windows you will need to quote the plugins argument if you are
     building more than one plugin:

        > ant "-Dplugins=ant,jdt"

   The currently available list of plugin names include:

   - jdt: java support using the eclipse jdt.

   - ant: ant support.

   - maven: maven support.

   - wst: web development support using the eclipse wst.

   - cdt: c/c++ support using the eclipse cdt.

   - dltk: base support for dltk based lanugages (currently php and
     ruby).

   - pdt: php support using the eclipse pdt.

   - dltkruby: ruby support using the eclipse dltk-ruby.

*development-patches*


Developing / Submitting Patches
===============================

The preferred means of developing and submitting patches is to use a
github fork. Github provides a nice guide to forking
(http://help.github.com/forking/) which should get you started.

Although using a github fork is preferred, you can of course still
submit patches via email using git's format-patch command:

>

   $ git format-patch -M origin/master

<


Running the above command will generate a series of patch files which
can be submitted to the eclim development group
(http://groups.google.com/group/eclim-dev).


What's Next
===========

Now that you're familiar with the basics of building and patching
eclim, the next step is to familiarize yourself with the eclim
architecture and to review the detailed docs on how new features are
added.

All of that and more can be found in the eclim development docs
(|development-index|).

vim:ft=eclimhelp